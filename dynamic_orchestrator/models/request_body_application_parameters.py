# coding: utf-8

from __future__ import absolute_import
#from datetime import date, datetime  # noqa: F401

#from typing import List, Dict  # noqa: F401

from dynamic_orchestrator.models.base_model_ import Model
from dynamic_orchestrator import util


class RequestBodyApplicationParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, component_name: str=None,  latency_qoe_level_threshold: float=None, client_id: str=None):  # noqa: E501
        """RequestBodyApplicationParameters - a model defined in Swagger

        :param component_name: The component_name of this RequestBodyApplicationParameters.  # noqa: E501
        :type component_name: str
        :param latency_qoe_level_threshold: The latency_threshold of this RequestBodyApplicationParameters.  # noqa: E501
        :type latency_qoe_level_threshold: float
        :param client_id: The client_id of this RequestBodyApplicationParameters.  # noqa: E501
        :type client_id: str
        """
        self.swagger_types = {
            'component_name': str,
            'latency_qoe_level_threshold': float,
            'client_id': str
        }

        self.attribute_map = {
            'component_name': 'component_name',
            'latency_qoe_level_threshold': 'latency_qoe_level_threshold',
            'client_id': 'client_id'
        }
        self._component_name = component_name
        self._latency_qoe_level_threshold = latency_qoe_level_threshold
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt) -> 'RequestBodyApplicationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The request_body_application_parameters of this RequestBodyApplicationParameters.  # noqa: E501
        :rtype: RequestBodyApplicationParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_name(self) -> str:
        """Gets the component_name of this RequestBodyApplicationParameters.


        :return: The component_name of this RequestBodyApplicationParameters.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name: str):
        """Sets the component_name of this RequestBodyApplicationParameters.


        :param component_name: The component_name of this RequestBodyApplicationParameters.
        :type component_name: str
        """

        self._component_name = component_name

    @property
    def latency_qoe_level_threshold(self) -> float:
        """Gets the latency_qoe_level_threshold of this RequestBodyApplicationParameters.


        :return: The latency_qoe_level_threshold of this RequestBodyApplicationParameters.
        :rtype: float
        """
        return self._latency_qoe_level_threshold

    @latency_qoe_level_threshold.setter
    def latency_qoe_level_threshold(self, latency_qoe_level_threshold: float):
        """Sets the latency_threshold of this RequestBodyApplicationParameters.


        :param latency_threshold: The latency_threshold of this RequestBodyApplicationParameters.
        :type latency_threshold: float
        """

        self._latency_qoe_level_threshold = latency_qoe_level_threshold

    @property
    def client_id(self) -> str:
        """Gets the client_id of this RequestBodyApplicationParameters.


        :return: The client_id of this RequestBodyApplicationParameters.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the device_ip of this RequestBodyApplicationParameters.


        :param client_id: The device_ip of this RequestBodyApplicationParameters.
        :type client_id: str
        """

        self._client_id = client_id
