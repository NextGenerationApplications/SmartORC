# No equality constraints by now, all the constraints are of type <=:
#     constraints of type >= must be transformed in constaints of type
#     <= by changing the sign of the resource quantity, such as for Qlatency
# The availability of resources of the federation is represented with a 
#      list of Edge Miniclouds / Cloud ( without name, which is not important), 
#      each of which is constituted by a dictionary of key:value pair
#      { resource name: available quantity} where the last must be a numerical value  
# Every link between Edge Miniclouds/Clouds is directed, and is reported in 
#      an adjacency list after every component, indicated with the special key 'links'
# Every number in the list 'links' represents the position 
#      of the Edge Miniclouds/Clouds with which it communicates; it is a dictionary 
#      of available resources or monitored QoS indicators attached to the communication link. 
#      NOTE: if the source Edge Minicloud is at position 2, the first position in the
#            'links' list represents the Edge Minicloud of position 1 and the second the one in 
#            position 3, avoiding the position of the actual Edge Minicloud to avoid modeling
#            self communication loop 
# If a resource name start with Q, it is considered a QoS indicator: they will be confrontated
#      directly with the availability of the resource separately, instead to do a summation of them  
---
- memory: 1024
  VCPU: 40
  SG: 0
  storage: 20000
  links: 
    - Qlatency: -52.5
      bandwidth: 100
    - Qlatency: -16.5
      bandwidth: 744.6
- memory: 4096
  VCPU: 60
  storage: 10000
  SG: 0
  links:
    - Qlatency: -17
      bandwidth: 543
    - bandwidth: 10063.5
      Qlatency: -19
- memory: 16384
  SG: 1
  storage: 100000
  VCPU: 50
  links:
    - Qlatency: -19.4
      bandwidth: 109.5
    - Qlatency: -13
      bandwidth: 589.5
...